PEP: 9999
Title: Template Literals
Author: Thomas GÃ¼ttler <info@thomas-guettler.de>
Sponsor: TODO
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 08-Jun-2021
Python-Version: TODO
Post-History: 08-Jun-2021


Abstract
========

This PEP adds Template Literals to Python.

To avoid code injection like XSS or SQL-injection Template Literals can help to write
save Python code.

Template Literals provide an easy way to access the
local and global variables (like f-strings), so that
passing a dictionary to the Template is not necessary.

Motivation
==========

In the context of web development Python can do more than providing
REST APIs via http. With the trend to Server-Side-Rendering,
we face a fundamental question:

How to create HTML with Python?

If you use the FrOW pattern (HTML fragments over the wire), then you
will be writing small methods returning small HTML fragments.

As a developer I want to pass variables into template literals and
escaping the strings accordingly as simple as possible.

Rationale
=========

Imagine you want to create a small HTML fragment in Python,
and return it as HTTP-Response::

    HttpResponse(f'''
 <h1>Hi {name}</h1>
 Your messages: {messages}''')

The problem here is that in above example "name" and "messages" should be treated differently.

The variable "name" should get quoted.  For example if the name is "Mary & Bob",
the result should be "Mary &amp; Bob".

The variable "messages" contains HTML which is already quoted.  It should
not be quoted again.

Most frameworks have a way to do this conditional escaping.

For example Django uses `conditional_escape()`_

With the help of conditional_escape() the above problem could be solved like this::


     HttpResponse('''
         <h1>Hi {name}</h1>
         Your messages: {messages}'''.format(name=conditional_escape(name),
             messages=conditional_escape(messages)))
 

This solution has two drawbacks:

1. It is too verbose. Typing "conditional_escape(...)" again and again is cumbersome.
2. If a conditional_escape() gets forgotten Cross-site scripting attacks could be possible,
   since malicious users could inject HTML.


TODO:

- Create a pull request against the https://github.com/python/peps
  repository.


.. _conditional_escape():
  https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.conditional_escape


Specification
=============

Template Literals use backticks (like `JavaScript Template Literals`_)

Example::

    name = 'Mary & Bob'
    messages = `<ul><li>message1</li><li>message2</li></ul>`
    HttpResponse(`
        <h1>Hi {name}</h1>
        Your messages: {messages}

        Today: {datetime.date.today()}`)

Expressions appear within curly braces and get handled liked in f-strings (PEP-498).

The literal in backticks creates in instance of the new class `types.TemplateLiteral`.

`types.TemplateLiteral` has two attributes:

* `template`: The string inside the backticks.
* `data`: A dictionary mapping the strings inside the curly braces to the evaluated result.

For above example this would mean::

    template == '''
        <h1>Hi {name}</h1>
        Your messages: {messages}

        Today: {datetime.date.today()}'''

    data == {
        'name': 'Mary & Bob',
        'messages': <TemplateLiteral ...>,
        'datetime.date.today()': <datetime.date(2021, 6, 9)>
        }

It is up to the consumer of the TemplateLiteral to create the desired output.

For example a web framework could transform a TemplateLiteral to a SafeString like this::

    def template_literal_to_safestring(template_literal):
        return mark_safe(template_literal.format(**dict((key, conditional_escape(value)) for key, value in
            template_literal.data)))





.. _JavaScript Template Literals: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals



Security Implications
=====================

Template Literals can execute arbitrary code (like f-strings).

Template Literals get created by Python developers, not by users. If you want to make
templates available for users (for example if you develop a CMS), then please use a
different solution.


Reference Implementation
========================

TODO


Rejected Ideas
==============

TODO

Open Issues
===========

TODO

References
==========

TODO

Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
