PEP: 9999
Title: Template Literals
Author: Thomas GÃ¼ttler <info@thomas-guettler.de>
Sponsor: TODO
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 08-Jun-2021
Python-Version: TODO
Post-History: 08-Jun-2021


Abstract
========

This PEP adds Template Literals to Python.

To avoid code injection like XSS or SQL-injection Template Literals can help you to write
safe Python code.

Template Literals provide an easy way to access the
local and global variables (like f-strings), so that
passing a dictionary to the Template is not necessary.

Motivation
==========

In the context of web development Python can do more than providing
REST APIs via http.  With the trend to Server-Side-Rendering,
we face a fundamental question:

How to create save HTML with Python?

If you use the FrOW pattern (HTML fragments over the wire) [#FrOW]_, then you
will be writing small methods returning small HTML fragments.

As a developer I want to pass escaped data into template literals as simple as possible.

Rationale
=========

Imagine you want to create a small HTML fragment in Python. If you use the Django framework,
you could do it like this::

    format_html('''
        <h1>Hi {name}!</h1>
        Your messages: {messages}''', name=name, messages=messages)

In above example "name" and "messages" are different.

The variable "name" should get escaped.  For example if the name is "Mary & Bob",
the result should be "Mary &amp; Bob".

The variable "messages" contains HTML which is already escaped.  It should
not be escaped again.


``format_html()`` has two drawbacks:

1. It is too verbose.  Passing the variables into the template by typing ``foo=foo, bar=bar`` again and again is cumbersome.
2. Expressions (like in f-strings) are not possible.

Template Literals will solve both drawbacks with a easy to read and write syntax.

Goal
====

The goal is to reduce above example to::

    `<h1>Hi {name}!</h1>
        Your messages: {messages}`


Specification
=============

Template Literals use backticks (like `JavaScript Template Literals`_)

Example::

    name = 'Mary & Bob'
    messages = `<ul><li>message1</li><li>message2</li></ul>`
    return HttpResponse(`
        <h1>Hi {name}</h1>
        Your messages: {messages}

        Today: {datetime.date.today()}`)

Expressions within curly braces get handled liked in f-strings (PEP-498).

The Template Literal creates an instance of the new class ``types.TemplateLiteral``.

``types.TemplateLiteral`` has two attributes:

* ``template``: The raw string inside the backticks.
* ``tokens``: A list of tuples: (value, is_literal).

For above example the TemplateLiteral instance will have these attributes::

    template = '''
        <h1>Hi {name}</h1>
        Your messages: {messages}

        Today: {datetime.date.today()}'''

    tokens = [
        ('\n        <h1>Hi ', True),
        ('Mary & Bob', False),
        ('</h1>\n        Your messages: ', True),
        (<TemplateLiteral "<ul><li>message1</li><li>message2</li></ul>">, False),
        ('\n\n        Today: ', True),
        (<datetime.date(2021, 6, 9)>, False)
        ]

It is outside this PEP how a consumer of TemplateLiteral handles this data structure.

For example the Django web framework could transform a TemplateLiteral to a SafeString like this::

    def template_literal_to_safestring(template_literal):
        return mark_safe(
            ''.join(
                [
                    conditional_escape(value) if not is_literal else value
                    for (value, is_literal) in template_literal.tokens
                ]
            )
        )


This PEP is not related or constraint to the Django framework.  It is even not related to HTML.  It can
be used for any kind of templating.

.. _JavaScript Template Literals: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals

Use-cases beside HTML
=====================

Logging
-------

`Logging Style Guide of Google`_:

    For logging functions that expect a pattern-string (with %-placeholders) as their first argument:
    Always call them with a string literal (not an f-string!) as their first argument
    with pattern-parameters as subsequent arguments.  Some logging implementations collect the
    unexpanded pattern-string as a queryable field.  It also prevents spending time rendering a
    message that no logger is configured to output.

Example::

    if load > max_load:
        logging.warn(`Load is too high: {load}`)

This way the logging handler has access to the actual value, and could encode it as JSON.  This way
the log processing tools, don't need to do error-prone parsing of the logged string.

.. _Logging Style Guide of Google: https://google.github.io/styleguide/pyguide.html#3101-logging


I18N
----



Security Implications
=====================

Template Literals can execute arbitrary code (like f-strings).

Template Literals get created by Python developers, not by users.  If you want to make
templates available for users (for example if you develop a CMS), then please use a
different solution.


Rejected Ideas
==============

Use locals() to pass variables to method
----------------------------------------

Instead of enhancing Python, a developer could use ``locals()``.

Example::

    name = 'Mary & Bob'
    format_html('<h1>Welcome {name}</h1>', **locals())

Above example has a major drawback.  IDEs and linters think the variable "name"
is not used. The variable would be colored in a different way, which confuses
developers. Linters will print warnings about unused variables.

Second drawback: Expressions in the template string are not possible.

Accessing the callers namespace via inspect module
--------------------------------------------------

Given the dynamic nature of Python, one could write a method which
accesses the local variables of the caller.

Example::

    import inspect

    from django.utils.html import format_html


    def html(string):
        locals_ = inspect.currentframe().f_back.f_locals
        return format_html(string, **locals_)


    def main():
        name = "Adam"
        statement = "I'm < 120 years old"
        print(html("<strong>{name}</strong> says <em>{statement}</em>"))


This has drawback:

* IDEs and linters don't know that the variables get used and would act accordingly.

* This would not allow expressions like in f-strings.


Alternative Ideas
=================

Instead of backticks for example ``t'...'`` could be used.

Alternative Names
=================

TemplateValue

TemplateTokenSequence

Reference Implementation
========================

TODO

Open Issues
===========

TODO


References
==========

.. [#FrOW] FrOW, "HTML Fragments Over the Wire". Frameworks like Unpoly, Hotwire or htmx.


Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
